{{- if .Values.svix.createJwtSecret.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: svix-jwt-service-account
  {{ with .Values.svix.createJwtSecret.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: svix-jwt-secret-role
  {{ with .Values.svix.createJwtSecret.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create", "get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: svix-jwt-secret-rolebinding
  {{ with .Values.svix.createJwtSecret.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
subjects:
  - kind: ServiceAccount
    name: svix-jwt-service-account
    namespace: "{{ .Release.Namespace }}"
roleRef:
  kind: Role
  name: svix-jwt-secret-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: batch/v1
kind: Job
metadata:
  name: svix-create-jwt
  labels:
    {{- include "svix.labels" . | nindent 4 }}
  {{ with .Values.svix.createJwtSecret.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  template:
    metadata:
      labels:
        {{- include "svix.labels" . | nindent 8 }}
    spec:
      serviceAccountName: svix-jwt-service-account
      containers:
        - name: svix-jwt-generator
          image: "{{ .Values.svix.image.repository }}:{{ .Values.svix.image.tag | default "latest" }}"
          env:
            {{- if .Values.postgresql.enabled  }}
            - name: SVIX_DB_DSN
              value: "postgresql://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@svix-postgresql:5432/{{ .Values.postgresql.auth.database }}"
            {{- end }}

            {{- if .Values.redis.enabled  }}
            - name: SVIX_REDIS_DSN
              value: "redis://{{ .Release.Name }}-redis-master:6379"
            - name: SVIX_QUEUE_DSN
              value: "$(SVIX_REDIS_DSN)"
            - name: SVIX_CACHE_DSN
              value: "$(SVIX_REDIS_DSN)"
            {{- end }}

            {{- range .Values.svix.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}

          command: ["sh", "-c"]
          args:
            - |
              set -e
              svix-server jwt generate | sed 's/^Token (Bearer): //' > /tmp/jwt-token

          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp

        - name: create-jwt-secret
          image: bitnami/kubectl:latest
          command: ["sh", "-c"]
          args:
            - |
              set -e
              if ! kubectl get secret -n {{ .Release.Namespace }} {{ .Values.svix.createJwtSecret.secretName }}; then
                kubectl create secret generic -n {{ .Release.Namespace }} {{ .Values.svix.createJwtSecret.secretName }} \
                --from-literal={{ .Values.svix.createJwtSecret.secretKey }}=$(cat /tmp/jwt-token)
              fi

          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
      restartPolicy: OnFailure
      volumes:
        - name: tmp-volume
          emptyDir: {}
{{- end }}
