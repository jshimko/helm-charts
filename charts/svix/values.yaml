# Default values for svix.

nameOverride: ""
fullnameOverride: ""

# Svix server
svix:
  replicaCount: 1

  image: svix/svix-server:latest
  imagePullPolicy: IfNotPresent

  imagePullSecrets: []

  env:
    []
    # - name: NODE_ENV
    #   value: production

  envFrom:
    []
    # - secretRef:
    #     name: my-secret
    # - configMapRef:
    #     name: my-configmap

  # -- optional Postgres Operator cluster secret name. This is useful if you deploy a PostgresCluster instance outside of this chart.
  postgresClusterSecret: ""

  # Note that the schema option below must match the user name in the PostgresCluster users list or database permissions will be denied until manually granted.
  # -- PostgresCluster connection string options. e.g. schema=stack,connection_limit=10,connect_timeout=10,pool_timeout=10
  dbUrlOptions: "schema=svix&sslmode=require&application_name=svix"

  # Create a k8s secret with a JWT token that an app can use to authenticate with Svix.
  # Optionally choose a custom name for the secret and the key to store the JWT in.
  # Example usage of this secret in a service that needs to access the Svix API:
  # envFrom:
  #   - secretRef:
  #       name: svix-jwt
  createJwtSecret:
    enabled: false
    secretName: svix-jwt
    secretKey: SVIX_API_KEY
    annotations: {}

  # Create a service account for the Svix server deployment.
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, name is svix-server
    name: ""

  podAnnotations: {}
  podLabels: {}

  podSecurityContext:
    {}
    # fsGroup: 2000

  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 8071

  ingress:
    enabled: false
    className: ""
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: example.com
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - example.com

  resources:
    {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  startupProbe:
    # httpGet:
    #   path: /
    #   port: http
  livenessProbe:
    # httpGet:
    #   path: /
    #   port: http
  readinessProbe:
    # httpGet:
    #   path: /
    #   port: http

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 95

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}

# PGO PostgresCluster deployment
# If enabled below, PostgresOperator must already be installed in the cluster so the PostgresCluster CRD is available.
# You can install PostgresOperator to your cluster with the following command:

# helm install pgo -n pgo --create-namespace oci://registry.developers.crunchydata.com/crunchydata/pgo
#
# Postgres Operator docs
# https://access.crunchydata.com/documentation/postgres-operator/latest
# https://github.com/CrunchyData/postgres-operator
#
# PostgresCluster Chart
# https://github.com/jshimko/helm-charts/tree/main/charts/postgrescluster
postgrescluster:
  # -- disabled by default in case PostgresOperator is not installed in the cluster
  enabled: false

  # -- PostgresCluster name
  name: postgres-svix

  # -- PostgresCluster annotations
  annotations: {}
    # postgres-operator.crunchydata.com/autoCreateUserSchema: "true"

  # -- Postgres users to create and assign access to databases
  users:
    # -- db admin
    - name: postgres

    # -- app user
    - name: svix
      databases:
        - svix

  # -- Postgres instances
  instances:
    - name: svix
      replicas: 1

      # -- Postgres instance resources
      resources: {}
        # requests:
        #   cpu: 500m
        #   memory: 1Gi
        # limits:
        #   cpu: 1000m
        #   memory: 2Gi

      dataVolumeClaimSpec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: 2Gi

  pgBouncerReplicas: 1

  # pgBackRest Backups
  # https://pgbackrest.org/user-guide.html
  # -- https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/backups
  pgBackRestConfig:
    # which repo to use when triggering a manual backup
    manual:
      repoName: repo1 # in-cluster persistent volume
      options:
        - --type=full

    # # S3 auth
    # # https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/backups#using-s3
    # configuration:
    #   - secret:
    #       name: pgbackrest-backup-secret

    global:
      # set retention of full backups to 7 days
      # https://pgbackrest.org/user-guide.html#retention

      # in-cluster persistent volume
      repo1-retention-full: "7"
      repo1-retention-full-type: time

      # # S3 bucket
      # repo2-path: /pgbackrest/production
      # repo2-retention-full: "7"
      # repo2-retention-full-type: time

    repos:
      # in-cluster persistent volume
      - name: repo1
        volume:
          volumeClaimSpec:
            accessModes:
              - "ReadWriteOnce"
            resources:
              requests:
                storage: 10Gi
        schedules:
          # full backup weekly at 12:00a UTC Sunday
          full: "0 12 * * 0"
          # differential backup at 12:00 UTC Monday-Saturday
          differential: "0 12 * * 1-6"

      # # S3 bucket
      # - name: repo2
      #   s3:
      #     bucket: example-pgbackrest-bucket
      #     endpoint: s3.amazonaws.com
      #     region: us-east-1
      #   schedules:
      #     # full backup weekly at 1:00a UTC Sunday
      #     full: "0 1 * * 0"
      #     # differential backup at 1:00 UTC Monday-Saturday
      #     differential: "0 1 * * 1-6"

# Redis
# https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
redis:
  enabled: true
  architecture: standalone # "replication" or "standalone"

  fullnameOverride: svix-redis

  auth:
    enabled: false
    # password: ""

  master:
    extraFlags:
      - --save 60 500
      - --appendonly yes
      - --appendfsync everysec

# Misc extra K8s manifests to create
extraTemplates:
  []
  # - apiVersion: v1
  #   kind: Secret
  #   type: Opaque
  #   metadata:
  #     name: my-secret
  #     namespace: my-namespace
  #   data:
  #     key: value
