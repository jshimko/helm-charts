# Default values for svix.

nameOverride: ""
fullnameOverride: ""

# Svix server
svix:
  replicaCount: 1

  image:
    repository: svix/svix-server
    pullPolicy: Always
    tag: latest

  imagePullSecrets: []

  env:
    []
    # - name: NODE_ENV
    #   value: production

  envFrom:
    []
    # - secretRef:
    #     name: my-secret
    # - configMapRef:
    #     name: my-configmap

  # Create a k8s secret with a JWT token that an app can use to authenticate with Svix.
  # Optionally choose a custom name for the secret and the key to store the JWT in.
  # Example usage of this secret in a service that needs to access the Svix API:
  # envFrom:
  #   - secretRef:
  #       name: svix-jwt
  createJwtSecret:
    enabled: false
    secretName: svix-jwt
    secretKey: SVIX_API_KEY
    annotations: {}

  # Create a service account for the Svix server deployment.
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, name is svix-server
    name: ""

  podAnnotations: {}
  podLabels: {}

  podSecurityContext:
    {}
    # fsGroup: 2000

  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 8071

  ingress:
    enabled: false
    className: ""
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: example.com
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - example.com

  resources:
    {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  startupProbe:
    # httpGet:
    #   path: /
    #   port: http
  livenessProbe:
    # httpGet:
    #   path: /
    #   port: http
  readinessProbe:
    # httpGet:
    #   path: /
    #   port: http

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 95

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}

# Postgres
# https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
postgresql:
  enabled: true
  architecture: standalone # "replication" or "standalone"
  fullnameOverride: svix-postgresql

  auth:
    username: svix
    password: svix123
    database: svix

# Redis
# https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
redis:
  enabled: true
  architecture: standalone # "replication" or "standalone"

  fullnameOverride: svix-redis

  auth:
    enabled: false
    # password: ""

  master:
    extraFlags:
      - --save 60 500
      - --appendonly yes
      - --appendfsync everysec

# Misc extra K8s manifests to create
extraTemplates:
  []
  # - apiVersion: v1
  #   kind: Secret
  #   type: Opaque
  #   metadata:
  #     name: my-secret
  #     namespace: my-namespace
  #   data:
  #     key: value
